import React, { useEffect, useState } from "react";
import { useParams, useNavigate } from "react-router-dom";
import {
  getPresignedUrlVideoLecture,
  uploadVideoLectureToS3,
  updateVideoLecture,
} from "../api";
import axiosAuth from "../../../api/axiosAuth";

interface Course {
  courseId: string;
  title: string;
  image: string;
  level: string;
  category: string;
}

interface Section {
  sectionId: string;
  title: string;
  position: number;
}

interface Lecture {
  lectureId: string;
  title: string;
  description?: string;
  videoUrl?: string;
  duration?: number;
  position: number;
}

const EditLecture: React.FC = () => {
  const { lectureId } = useParams<{ lectureId: string }>();
  const navigate = useNavigate();
  const [course, setCourse] = useState<Course | null>(null);
  const [section, setSection] = useState<Section | null>(null);
  const [lecture, setLecture] = useState<Lecture | null>(null);
  const [loading, setLoading] = useState(true);
  const [title, setTitle] = useState("");
  const [description, setDescription] = useState("");
  const [duration, setDuration] = useState("");
  const [videoUrl, setVideoUrl] = useState<string | null>(null);
  const [newVideoFile, setNewVideoFile] = useState<File | null>(null);
  const [videoPreview, setVideoPreview] = useState<string | null>(null);
  const [saving, setSaving] = useState(false);
  const [isEditing, setIsEditing] = useState(false);

  useEffect(() => {
    async function fetchLectureData() {
  setLoading(true);
  try {
    const lectureRes = await axiosAuth.get(`/sections/{sectionId}/lectures/${lectureId}`);
    const lectureData = lectureRes.data.data;
    console.log("üé¨ Lecture data:", lectureData);
    
    const sectionRes = await axiosAuth.get(`/courses/{courseId}/sections/${lectureData.sectionId}`);
    const sectionData = sectionRes.data.data;
    console.log("üì¶ Section data:", sectionData);

    const courseRes = await axiosAuth.get(`/courses/${sectionData.courseId}`);
    const courseData = courseRes.data.data;
    console.log("üìö Course data:", courseData);

    setLecture(lectureData);
    setSection(sectionData);
    setCourse(courseData);

    setTitle(lectureData.title);
    setDescription(lectureData.description || "");
    setDuration(lectureData.duration?.toString() || "");
    setVideoUrl(lectureData.videoUrl || null);
  } catch (error) {
    console.error("‚ùå Error fetching data:", error);
  } finally {
    setLoading(false);
  }
}
    if (lectureId) fetchLectureData();
  }, [lectureId]);

  const handleVideoChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (!e.target.files || e.target.files.length === 0) return;
    const file = e.target.files[0];
    setNewVideoFile(file);
    setVideoPreview(URL.createObjectURL(file));
  };

  const handleSave = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!lectureId) return;
    setSaving(true);
    try {
      let videoToSave = videoUrl;

      if (newVideoFile) {
        const ext = "." + newVideoFile.name.split(".").pop()?.toLowerCase();
        const { url, key } = await getPresignedUrlVideoLecture(ext);
        await uploadVideoLectureToS3(url, newVideoFile);
        const videoUrlFull = `https://dinhlooc-test-2025.s3.us-east-1.amazonaws.com/${encodeURIComponent(key)}`;
        await updateVideoLecture(lectureId, videoUrlFull);
        videoToSave = videoUrlFull;
        setVideoUrl(videoToSave);
        setNewVideoFile(null);
        setVideoPreview(null);
      }

      // Update lecture info
      await axiosAuth.put(`/sections/lectures/${lectureId}`, {
        title,
        description,
        duration: parseInt(duration) || 0,
      });

      setIsEditing(false);
      alert("C·∫≠p nh·∫≠t th√†nh c√¥ng!");
    } catch (error) {
      console.error("Error saving:", error);
      alert("C√≥ l·ªói x·∫£y ra khi c·∫≠p nh·∫≠t!");
    } finally {
      setSaving(false);
    }
  };

  const resetForm = () => {
    setIsEditing(false);
    setNewVideoFile(null);
    setVideoPreview(null);
    if (lecture) {
      setTitle(lecture.title);
      setDescription(lecture.description || "");
      setDuration(lecture.duration?.toString() || "");
      setVideoUrl(lecture.videoUrl || null);
    }
  };

  if (loading) {
    return (
      <div className="flex justify-center items-center h-64">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-indigo-600"></div>
      </div>
    );
  }

  if (!lecture || !section || !course) {
    return (
      <div className="text-center py-12">
        <div className="text-gray-400 mb-4">
          <i className="fas fa-exclamation-triangle text-6xl"></i>
        </div>
        <h3 className="text-xl font-semibold text-gray-600">Kh√¥ng t√¨m th·∫•y b√†i gi·∫£ng</h3>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50 py-8">
      <div className="max-w-6xl mx-auto">
        {/* Breadcrumb Navigation */}
        <nav className="mb-6">
          <div className="bg-white rounded-lg shadow px-6 py-4">
            <div className="flex items-center space-x-2 text-sm text-gray-600">
              <button
                onClick={() => navigate('/instructor/courses')}
                className="hover:text-indigo-600 transition-colors"
              >
                Kh√≥a h·ªçc c·ªßa t√¥i
              </button>
              <i className="fas fa-chevron-right text-xs"></i>
              <button
                onClick={() => navigate(`/instructor/courses/${course.courseId}/edit`)}
                className="hover:text-indigo-600 transition-colors"
              >
                {course.title}
              </button>
              <i className="fas fa-chevron-right text-xs"></i>
              <button
                onClick={() => navigate(`/instructor/courses/${course.courseId}/detail`)}
                className="hover:text-indigo-600 transition-colors"
              >
                Qu·∫£n l√Ω n·ªôi dung
              </button>
              <i className="fas fa-chevron-right text-xs"></i>
              <span className="text-gray-900 font-medium">{section.title}</span>
              <i className="fas fa-chevron-right text-xs"></i>
              <span className="text-indigo-600 font-medium">{lecture.title}</span>
            </div>
          </div>
        </nav>

        {/* Header */}
        <div className="bg-gradient-to-r from-indigo-600 to-purple-600 text-white rounded-lg p-8 mb-8">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-6">
              <img
                src={course.image}
                alt={course.title}
                className="w-16 h-16 rounded-lg object-cover shadow-lg"
              />
              <div>
                <div className="text-sm text-indigo-200 mb-1">
                  {course.title} ‚Üí {section.title}
                </div>
                <h1 className="text-3xl font-bold mb-2">Ch·ªânh s·ª≠a b√†i gi·∫£ng</h1>
                <p className="text-indigo-100">{lecture.title}</p>
              </div>
            </div>
            <div className="flex gap-3">
              <button
                onClick={() => navigate(`/instructor/courses/${course.courseId}/detail`)}
                className="border border-white text-white px-6 py-2 rounded-lg hover:bg-white hover:text-indigo-600 transition-colors flex items-center gap-2"
              >
                <i className="fas fa-arrow-left"></i>
                Quay l·∫°i
              </button>
              {!isEditing && (
                <button
                  onClick={() => setIsEditing(true)}
                  className="bg-white text-indigo-600 px-6 py-2 rounded-lg font-semibold hover:bg-gray-100 transition-colors flex items-center gap-2"
                >
                  <i className="fas fa-edit"></i>
                  Ch·ªânh s·ª≠a
                </button>
              )}
            </div>
          </div>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
          {/* Video Section */}
          <div className="lg:col-span-2">
            <div className="bg-white rounded-lg shadow p-6 mb-6">
              <h3 className="text-lg font-semibold mb-4 flex items-center gap-2">
                <i className="fas fa-play-circle text-indigo-600"></i>
                Video b√†i gi·∫£ng
              </h3>
              
              <div className="aspect-video bg-gray-100 rounded-lg overflow-hidden mb-4">
                {videoPreview || videoUrl ? (
                  <video
                    src={videoPreview || videoUrl || ""}
                    controls
                    className="w-full h-full object-cover"
                  />
                ) : (
                  <div className="w-full h-full flex items-center justify-center text-gray-400">
                    <div className="text-center">
                      <i className="fas fa-video text-6xl mb-4"></i>
                      <p>Ch∆∞a c√≥ video</p>
                    </div>
                  </div>
                )}
              </div>

              {isEditing && (
                <div className="border-2 border-dashed border-gray-300 rounded-lg p-6 text-center hover:border-indigo-400 transition-colors">
                  <input
                    type="file"
                    accept="video/*"
                    onChange={handleVideoChange}
                    className="hidden"
                    id="video-upload"
                  />
                  <label htmlFor="video-upload" className="cursor-pointer">
                    <i className="fas fa-cloud-upload-alt text-4xl text-gray-400 mb-4 block"></i>
                    <p className="text-gray-600 mb-2">Nh·∫•n ƒë·ªÉ ch·ªçn video ho·∫∑c k√©o th·∫£ file v√†o ƒë√¢y</p>
                    <p className="text-sm text-gray-500">H·ªó tr·ª£: MP4, AVI, MOV (t·ªëi ƒëa 500MB)</p>
                  </label>
                </div>
              )}
            </div>

            {/* Lecture Info Form */}
            <div className="bg-white rounded-lg shadow p-6">
              <h3 className="text-lg font-semibold mb-4 flex items-center gap-2">
                <i className="fas fa-info-circle text-indigo-600"></i>
                Th√¥ng tin b√†i gi·∫£ng
              </h3>
              
              <form onSubmit={handleSave} className="space-y-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Ti√™u ƒë·ªÅ b√†i gi·∫£ng *
                  </label>
                  <input
                    value={title}
                    onChange={(e) => setTitle(e.target.value)}
                    disabled={!isEditing}
                    className={`w-full px-4 py-3 border rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500 transition-colors ${
                      isEditing
                        ? "border-gray-300 bg-white"
                        : "bg-gray-50 border-gray-200 cursor-not-allowed"
                    }`}
                    placeholder="Nh·∫≠p ti√™u ƒë·ªÅ b√†i gi·∫£ng..."
                    required
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    M√¥ t·∫£ b√†i gi·∫£ng
                  </label>
                  <textarea
                    value={description}
                    onChange={(e) => setDescription(e.target.value)}
                    disabled={!isEditing}
                    className={`w-full px-4 py-3 border rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500 transition-colors ${
                      isEditing
                        ? "border-gray-300 bg-white"
                        : "bg-gray-50 border-gray-200 cursor-not-allowed"
                    }`}
                    rows={4}
                    placeholder="M√¥ t·∫£ n·ªôi dung b√†i gi·∫£ng..."
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Th·ªùi l∆∞·ª£ng (ph√∫t)
                  </label>
                  <input
                    type="number"
                    value={duration}
                    onChange={(e) => setDuration(e.target.value)}
                    disabled={!isEditing}
                    className={`w-full px-4 py-3 border rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500 transition-colors ${
                      isEditing
                        ? "border-gray-300 bg-white"
                        : "bg-gray-50 border-gray-200 cursor-not-allowed"
                    }`}
                    placeholder="0"
                  />
                </div>

                {isEditing && (
                  <div className="flex gap-4 pt-4">
                    <button
                      type="button"
                      onClick={resetForm}
                      className="px-6 py-3 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors flex items-center gap-2"
                    >
                      <i className="fas fa-times"></i>
                      H·ªßy b·ªè
                    </button>
                    <button
                      type="submit"
                      disabled={saving}
                      className="flex-1 px-6 py-3 bg-indigo-600 text-white rounded-lg hover:bg-indigo-700 transition-colors flex items-center justify-center gap-2 disabled:bg-gray-400"
                    >
                      <i className="fas fa-save"></i>
                      {saving ? "ƒêang l∆∞u..." : "L∆∞u thay ƒë·ªïi"}
                    </button>
                  </div>
                )}
              </form>
            </div>
          </div>

          {/* Sidebar */}
          <div className="lg:col-span-1">
            {/* Course Info */}
            <div className="bg-white rounded-lg shadow p-6 mb-6 sticky top-8">
              <h3 className="text-lg font-semibold mb-4 flex items-center gap-2">
                <i className="fas fa-graduation-cap text-indigo-600"></i>
                Th√¥ng tin kh√≥a h·ªçc
              </h3>
              <div className="space-y-3">
                <div>
                  <span className="text-sm text-gray-600">Kh√≥a h·ªçc:</span>
                  <p className="font-medium text-gray-900">{course.title}</p>
                </div>
                <div>
                  <span className="text-sm text-gray-600">Section:</span>
                  <p className="font-medium text-gray-900">{section.title}</p>
                </div>
                <div>
                  <span className="text-sm text-gray-600">V·ªã tr√≠:</span>
                  <p className="font-medium text-gray-900">B√†i {lecture.position}</p>
                </div>
              </div>

              <hr className="my-4" />

              <div className="space-y-2">
                <button className="w-full text-left p-3 rounded-lg hover:bg-gray-50 transition-colors flex items-center gap-3 text-sm">
                  <i className="fas fa-eye text-indigo-600"></i>
                  <span>Xem tr∆∞·ªõc b√†i gi·∫£ng</span>
                </button>
                <button className="w-full text-left p-3 rounded-lg hover:bg-gray-50 transition-colors flex items-center gap-3 text-sm">
                  <i className="fas fa-copy text-indigo-600"></i>
                  <span>Sao ch√©p b√†i gi·∫£ng</span>
                </button>
                <button className="w-full text-left p-3 rounded-lg hover:bg-red-50 text-red-600 transition-colors flex items-center gap-3 text-sm">
                  <i className="fas fa-trash"></i>
                  <span>X√≥a b√†i gi·∫£ng</span>
                </button>
              </div>
            </div>

            {/* Quick Stats */}
            <div className="bg-white rounded-lg shadow p-6">
              <h3 className="text-lg font-semibold mb-4 flex items-center gap-2">
                <i className="fas fa-chart-bar text-indigo-600"></i>
                Th·ªëng k√™ nhanh
              </h3>
              <div className="space-y-3">
                <div className="flex justify-between items-center">
                  <span className="text-gray-600">L∆∞·ª£t xem:</span>
                  <span className="font-semibold text-indigo-600">0</span>
                </div>
                <div className="flex justify-between items-center">
                  <span className="text-gray-600">Ho√†n th√†nh:</span>
                  <span className="font-semibold text-green-600">0%</span>
                </div>
                <div className="flex justify-between items-center">
                  <span className="text-gray-600">ƒê√°nh gi√°:</span>
                  <span className="font-semibold text-yellow-600">0/5</span>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default EditLecture;